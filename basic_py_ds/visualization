# Basics
    * Barcharts - Used to make comparison between categories
        * horizontal: comparing 1 category at a time & long category labels
        * vertical: more than 1 category, category over time, negative values
    * line charts
        * used to visualize trends 
    * Pie Charts ( can show proportions)
        * Best on only a few categories!
        * components should add up to a meanginful whole. If you present R, Python, Javascript as only programming languages people search for. Include `other`
    * stacked area chart        
        * when icumulative proportions matter
        * when trends are more important than specific values
    * boxplots
        * useful for comparing distribution of data (good for spotting outliers
    * scatterplots:
        * be careful with scaling points by 3rd var(although i love it) as its notorious for errors of human understanability of scale        


    Color:
        3 types of color schemes:
            qualitative: categories unrelated
            sequential: 'amount of rain a city receives'
            diverging: obvious demarkation point, I.E. company profit
        * colorbrewer is a great tool: ColorBrewer2.org 
            * dont use default excel colors

* common mistakes
    * label axis!
    * 3rd charts, often doesent add info for extra complexity. usually 3d charti unwarrented    
    * Too many categories in pie-chart
    * failing to start barchart at 0 :)
    * failing to normalize data
    * chartjunk -> dont add unnecessary excess (background, etc.)

* good practices:
   * show underlying data if possible, simply 
   * label ojects and data directly 
   * make sure visualization can stand by itself 
    
* data sources:
    * data.gov
    * data.gov.uk
    * cia gov database
    * www.cia.gov/library/publications/download/
    * world health orginzation who.int/gho
    * data aggreagators:
        quandl.com
    * big data:
        aws public datasets: aws.amazon.com/datasets/             

# matplotlib framework
    * create a figure
    * plot the data
        * multiple times, if needed
    * configure axes
    * add annotatoins
    * show/save the figure

# styles
    * use styles; plt.style.context

         

 

